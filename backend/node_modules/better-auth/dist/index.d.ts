export { z as Account, a as Adapter, J as AdapterInstance, F as AdapterSchemaCreation, w as AdditionalSessionFieldsInput, x as AdditionalSessionFieldsOutput, u as AdditionalUserFieldsInput, v as AdditionalUserFieldsOutput, n as Auth, p as AuthContext, g as AuthPluginSchema, B as BetterAuthOptions, h as BetterAuthPlugin, O as FilterActions, N as FilteredAPI, G as GenericEndpointContext, H as HookEndpointContext, Q as InferAPI, I as InferOptionSchema, i as InferPluginErrorCodes, y as InferPluginTypes, r as InferSession, P as InferSessionAPI, q as InferUser, _ as LogHandlerParams, T as LogLevel, Z as Logger, M as Models, R as RateLimit, L as SecondaryStorage, S as Session, U as User, V as Verification, E as Where, W as WithJsDoc, t as betterAuth, $ as createLogger, D as init, X as levels, a0 as logger, Y as shouldPublishLog } from './shared/better-auth.DdmVKCUf.js';
export { A as AtomListener, B as BetterAuthClientPlugin, C as ClientOptions, b as InferActions, g as InferAdditionalFromClient, a as InferClientAPI, c as InferErrorCodes, d as InferPluginsFromClient, e as InferSessionFromClient, f as InferUserFromClient, I as IsSignal, S as Store } from './shared/better-auth.p6Acef0D.js';
export { H as HIDE_METADATA } from './shared/better-auth.DEHJp1rk.js';
export { g as generateState, p as parseState } from './shared/better-auth.-5OPYG5K.js';
export * from 'better-call';
export * from 'zod';
export { D as DeepPartial, E as Expand, H as HasRequiredKeys, a as LiteralNumber, L as LiteralString, d as LiteralUnion, O as OmitId, c as PreserveJSDoc, b as Prettify, P as PrettifyDeep, R as RequiredKeysOf, S as StripEmptyObjects, U as UnionToIntersection, W as WithoutEmpty } from './shared/better-auth.Bi8FQwDD.js';
export { O as OAuth2Tokens, a as OAuthProvider, P as ProviderOptions } from './shared/better-auth.Da_FnxgM.js';
import 'kysely';
import 'better-sqlite3';
import 'bun:sqlite';
import '@better-fetch/fetch';
import 'nanostores';

declare function capitalizeFirstLetter(str: string): string;

declare const generateId: (size?: number) => string;

declare class BetterAuthError extends Error {
    constructor(message: string, cause?: string);
}
declare class MissingDependencyError extends BetterAuthError {
    constructor(pkgName: string);
}

export { BetterAuthError, MissingDependencyError, capitalizeFirstLetter, generateId };
