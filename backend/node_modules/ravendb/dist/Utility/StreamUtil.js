"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipelineAsync = exports.finishedAsync = void 0;
exports.readToBuffer = readToBuffer;
exports.readToEnd = readToEnd;
exports.bufferToReadable = bufferToReadable;
exports.stringToReadable = stringToReadable;
exports.printStreamTraffic = printStreamTraffic;
const stream = require("readable-stream");
const node_util_1 = require("node:util");
exports.finishedAsync = (0, node_util_1.promisify)(stream.finished);
exports.pipelineAsync = (0, node_util_1.promisify)(stream.pipeline);
async function readToBuffer(stream) {
    const chunks = [];
    stream
        .on("data", data => chunks.push(data));
    await (0, exports.finishedAsync)(stream);
    return Buffer.concat(chunks);
}
async function readToEnd(readable) {
    const chunks = [];
    readable.on("data", chunk => chunks.push(chunk));
    await (0, exports.finishedAsync)(readable);
    return Buffer.concat(chunks).toString("utf8");
}
function bufferToReadable(b) {
    const result = new stream.Readable();
    result.push(b);
    result.push(null);
    return result;
}
function stringToReadable(s) {
    const result = new stream.Readable();
    result.push(s);
    result.push(null);
    return result;
}
function printStreamTraffic(str) {
    str.on("data", d => console.log("READ", d.toString()));
    const orgWrite = str.write;
    str.write = (...args) => {
        console.log("WRITE", args[0]);
        return orgWrite.call(str, ...args);
    };
}
//# sourceMappingURL=StreamUtil.js.map